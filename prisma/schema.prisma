generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  name            String?
  email           String?   @unique
  emailVerified   DateTime?
  image           String?
  password        String?
  isActive        Boolean   @default(false)
  activationToken String?
  resetToken      String?
  resetTokenExpiry DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  accounts        Account[]
  sessions        Session[]
  cars            Car[]
  payments        Payment[]
  purchases       Purchase[]
  ratings         Rating[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Car {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  price       Float
  published   Boolean  @default(false)
  createdAt   DateTime @default(now())
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  payments    Payment[]
  purchases   Purchase[]

  brand        String
  model        String
  year         Int
  mileage      Int
  fuel         String
  transmission String
  description  String?
  imageUrl     String?
 imageUrl2     String?
 imageUrl3    String?
}

model Payment {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  amount      Float
  fee         Float
  status      String
  stripeId    String   @unique
  createdAt   DateTime @default(now())
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  carId       String?  @db.ObjectId
  car         Car?     @relation(fields: [carId], references: [id])
}

model Purchase {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  buyerId     String   @db.ObjectId
  buyer       User     @relation(fields: [buyerId], references: [id])
  carId       String   @db.ObjectId
  car         Car      @relation(fields: [carId], references: [id])
  paymentId   String   @db.ObjectId
  amount      Float
  purchaseDate DateTime @default(now())
  status      String   @default("completed")
}

model Rating {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  rating    Int      // Note de 1 à 5 étoiles
  comment   String?  // Commentaire optionnel
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId]) // Un utilisateur ne peut noter qu'une seule fois
}
